Sort an array of 0s, 1s and 2s
Problem Statement: Given an array consisting of only 0s, 1s, and 2s. 
Write a program to in-place sort the array without using inbuilt sort functions. 
( Expected: Single pass-O(N) and constant space)

Easy Approach: 
Keep track of no of 0, 1, 2 in single iteration.
Update in the same array accordingly

TC - O(2*N)
SC - O(1)

Other approach:
3 pointers - low, mid, high
low - 0 
mid - traverse
high - 2

0 - low = 0
low - mid = 1
mid - high = unsorted(traversing)
high - n-1 = 2

Initialize - low = 0, mid = 0, high = n-1;
1. arr[mid] = 0 -> swap low and mid and increment both low and mid
2. arr[mid] = 1 -> mid++
3. arr[mid] = 2 -> swap high and mid and decrement high ONLY

TC - O(N)
SC - O(1)